name: CI/CD for Spring Boot

on:
  push:
    branches: [ "" ]

permissions:
  contents: read

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set Docker Image Tag
        run: |
          VERSION="v1.0-${GITHUB_SHA::7}"
          echo "DOCKER_IMAGE_TAG=$VERSION" >> $GITHUB_ENV
          echo "Using version: $VERSION"

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/springboot-clp:$DOCKER_IMAGE_TAG .
          docker push ${{ secrets.DOCKER_USERNAME }}/springboot-clp:$DOCKER_IMAGE_TAG

      - name: Tag image as latest and Push
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/springboot-clp:$DOCKER_IMAGE_TAG ${{ secrets.DOCKER_USERNAME }}/springboot-clp:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/springboot-clp:latest

      - name: Copy docker-compose.prod.yml to Server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          source: docker-compose.prod.yml
          target: /home/ubuntu/

      - name: Deploy on Remote Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            echo "Deploying version: $DOCKER_IMAGE_TAG"
            cd /home/ubuntu
            sudo docker compose -f docker-compose.prod.yml pull 
            sudo docker image prune -af
            sudo docker compose -f docker-compose.prod.yml down || true 
            sudo docker compose -f docker-compose.prod.yml up -d 
            echo "Deployment complete."
